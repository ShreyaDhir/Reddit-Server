"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationStorage = void 0;
const path = __importStar(require("path"));
class MigrationStorage {
    constructor(driver, options) {
        this.driver = driver;
        this.options = options;
        this.connection = this.driver.getConnection();
        this.knex = this.connection.getKnex();
        this.helper = this.driver.getPlatform().getSchemaHelper();
    }
    async executed() {
        const migrations = await this.getExecutedMigrations();
        return migrations.map(({ name }) => `${this.getMigrationName(name)}`);
    }
    async logMigration(params) {
        const name = this.getMigrationName(params.name);
        await this.driver.nativeInsert(this.options.tableName, { name }, { ctx: this.masterTransaction });
    }
    async unlogMigration(params) {
        const withoutExt = this.getMigrationName(params.name);
        const qb = this.knex.delete().from(this.options.tableName).where('name', 'in', [params.name, withoutExt]);
        if (this.masterTransaction) {
            qb.transacting(this.masterTransaction);
        }
        await this.connection.execute(qb);
    }
    async getExecutedMigrations() {
        const qb = this.knex.select('*').from(this.options.tableName).orderBy('id', 'asc');
        if (this.masterTransaction) {
            qb.transacting(this.masterTransaction);
        }
        return this.connection.execute(qb);
    }
    async ensureTable() {
        const tables = await this.connection.execute(this.helper.getListTablesSQL(), [], 'all', this.masterTransaction);
        if (tables.find(t => t.table_name === this.options.tableName)) {
            return;
        }
        await this.knex.schema.createTable(this.options.tableName, table => {
            table.increments();
            table.string('name');
            table.dateTime('executed_at').defaultTo(this.knex.fn.now());
        });
    }
    setMasterMigration(trx) {
        this.masterTransaction = trx;
    }
    unsetMasterMigration() {
        delete this.masterTransaction;
    }
    /**
     * @internal
     */
    getMigrationName(name) {
        const parsedName = path.parse(name);
        if (['.js', '.ts'].includes(parsedName.ext)) {
            // strip extension
            return parsedName.name;
        }
        return name;
    }
}
exports.MigrationStorage = MigrationStorage;
